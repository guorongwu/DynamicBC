function [dALFF] = DynamicBC_dALFF(data,window,overlap,save_info)
%%
% save_info.slw_alignment = 1 :
% save_info.TR = ;
% save_info.highcut = ;
% save_info.lowcut = ;
%%
[nobs, nvar] = size(data);
step=ceil(window-overlap*window); % 10% overlap
% step=ceil((1-overlap)*window); % 10% overlap
if ~step||step<0
    error('you must reset overlap size!');
end
if window>nobs
   fprintf('There are only %d time points < window size = %d',nobs, window)
   error('you must reset window size!');
end
if window==nobs
    slides=1;
else
    slides=floor((nobs-window)/step)+1;
end
num0 = ceil(log10(slides))+2;
dALFF = cell(slides,1);  
t1=1-step;
t2=window-step;


for k=1:slides
    t1=t1+step;
    t2=t2+step; 
    disp([t1 t2])
    dat = data(t1:t2,:);
    if save_info.slw_alignment==1
        k1 = t1;
    else
        k1 = floor((t1+t2)./2);
    end
    [ALFF_2D] = dynamic_alff_subfun(dat,save_info.TR, save_info.highcut, save_info.lowcut);
%     [ALFF_2D] = dynamic_alff_subfun(data,0.645, 0.08, 0.01);
    dALFF{k} = ALFF_2D;
end
end

function [ALFF_2D] = dynamic_alff_subfun(AllVolume,ASamplePeriod, HighCutoff, LowCutoff)
% Use ALFF method to compute the brain and return a ALFF brain map which reflects the "energy" of the voxels' BOLD signal
% Ref: Zang, Y.F., He, Y., Zhu, C.Z., Cao, Q.J., Sui, M.Q., Liang, M., Tian, L.X., Jiang, T.Z., Wang, Y.F., 2007. Altered baseline brain activity in children with ADHD revealed by resting-state functional MRI. Brain Dev 29, 83-91.
% FORMAT    [ALFFBrain, Header] = y_alff(AllVolume,ASamplePeriod, HighCutoff, LowCutoff, AMaskFilename, AResultFilename, TemporalMask, ScrubbingMethod, Header, CUTNUMBER)
% Input:
% 	AllVolume		-	4D data matrix (DimX*DimY*DimZ*DimTimePoints) or the directory of 3D image data file or the filename of one 4D data file
% 	ASamplePeriod		TR, or like the variable name
% 	LowCutoff			the low edge of the pass band
% 	HighCutoff			the High edge of the pass band

% Output:
%	ALFFBrain       -   The ALFF results
%   Header          -   The NIfTI Header
%	AResultFilename	the filename of ALFF result
%-----------------------------------------------------------
%   Algorithm originally Written by Xiao-Wei Song (Dawnwei.Song@gmail.com).
%   Algorithm Re-Written by YAN Chao-Gan (ycg.yan@gmail.com) on 120328.
%   Note: the ALFF generated by the new version is sqrt(2/N) times of the
%   original version. (new version used: 2*abs(fft(x))/N; original version
%   used:  sqrt(2*abs(fft(x))^2/N)) 
%	http://restfmri.net 

nDimTimePoints = size(AllVolume,1);

% Get the frequency index
sampleFreq 	 = 1/ASamplePeriod;
sampleLength = nDimTimePoints;
paddedLength = rest_nextpow2_one35(sampleLength); %2^nextpow2(sampleLength);
if (LowCutoff >= sampleFreq/2) % All high included
    idx_LowCutoff = paddedLength/2 + 1;
else % high cut off, such as freq > 0.01 Hz
    idx_LowCutoff = ceil(LowCutoff * paddedLength * ASamplePeriod + 1);
    % Change from round to ceil: idx_LowCutoff = round(LowCutoff *paddedLength *ASamplePeriod + 1);
end
if (HighCutoff>=sampleFreq/2)||(HighCutoff==0) % All low pass
    idx_HighCutoff = paddedLength/2 + 1;
else % Low pass, such as freq < 0.08 Hz
    idx_HighCutoff = fix(HighCutoff *paddedLength *ASamplePeriod + 1);
    % Change from round to fix: idx_HighCutoff	=round(HighCutoff *paddedLength *ASamplePeriod + 1);
end


% Detrend before fft as did in the previous alff.m
%AllVolume=detrend(AllVolume);
% Cut to be friendly with the RAM Memory

AllVolume = detrend(AllVolume);

% Zero Padding
AllVolume = [AllVolume;zeros(paddedLength -sampleLength,size(AllVolume,2))]; %padded with zero

fprintf('\n\t Performing FFT ...');
%AllVolume = 2*abs(fft(AllVolume))/sampleLength;
% Cut to be friendly with the RAM Memory

AllVolume = 2*abs(fft(AllVolume))/sampleLength;

ALFF_2D = mean(AllVolume(idx_LowCutoff:idx_HighCutoff,:));


end
%%
function Result = rest_nextpow2_one35(n)
%Compute the min length for FFT according to AFNI's algorithm, By Xiao-Wei Song
%------------------------------------------------------------------------------------------------------------------------------
%	Copyright(c) 2007~2010
%	State Key Laboratory of Cognitive Neuroscience and Learning in Beijing Normal University
%	Written by Xiao-Wei Song 
%	http://resting-fmri.sourceforge.net
% 	<a href="Dawnwei.Song@gmail.com">Mail to Author</a>: Xiaowei Song
%	Version=1.0;
%	Release=20070903;

    if length(n)>1
        n = cast(length(n),class(n));
    end
    if n<16
        Result =2^nextpow2(n);
        return;
    end 
    
    limit =nextpow2(n);             %n=134, limit=8
    tbl=[2^(limit-1):2^limit];      %tbl =128, 129, ... , 256
    tbl =tbl(find(tbl>=n));          %tbl =134, 135, ... , 256
    for x=1:length(tbl)
        Result =tbl(x);
        [f,p]=log2(Result);
        if ~isempty(f) & f == 0.5   %Copy from nextpow2.m
            return;
        end
        if mod(Result,3*5)==0        
            y= Result /(3*5);
            [f,p]=log2(y);
            if ~isempty(f) & f == 0.5   %Copy from nextpow2.m
                return;
            end
        end
        if mod(Result,3)==0        
            y= Result /3;
            [f,p]=log2(y);
            if ~isempty(f) & f == 0.5   %Copy from nextpow2.m
                return;
            end
        end
        if mod(Result,5)==0        
            y= Result /5;
            [f,p]=log2(y);
            if ~isempty(f) & f == 0.5   %Copy from nextpow2.m
                return;
            end
        end
    end
    Result =NaN;    % Should not reach, except when n=1
end